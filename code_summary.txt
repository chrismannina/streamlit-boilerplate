Project Directory Structure:
streamlit-boilerplate/
    config.py
    main.py
    pages/
        1_dashboard.py
        2_settings.py
    components/
        navigation.py
        authentication.py
        footer.py
    static/
        js/
            analytics.js
            main.js
        css/
            theme.css
            main.css
        images/
            background.jpg
            logo.png
    .streamlit/
        secrets.toml
        config.toml
    utils/
        helpers.py

File: /home/machris/projects/github/streamlit-boilerplate/config.py
Contents:
from dataclasses import dataclass, field

@dataclass
class AppConfig:
    APP_NAME: str = "Streamlit Starter Template"
    PAGE_ICON: str = ":rocket:"
    LAYOUT: str = "wide"
    THEME_COLOR: str = "#3366cc"
    FONT_FAMILY: str = "sans serif"
    USE_AUTHENTICATION: bool = False
    AUTH_METHOD: str = "in_memory"  # Options: "in_memory", "database", "api"
    SHOW_NAVBAR: bool = False
    SHOW_SIDEBAR: bool = True
    PAGES: dict = field(default_factory=lambda: {
        "Home": {"icon": "house", "page_number": ""},
        "Dashboard": {"icon": "bar_chart", "page_number": "1"},
        "Settings": {"icon": "gear", "page_number": "2"},
    })

APP_CONFIG = AppConfig()

File: /home/machris/projects/github/streamlit-boilerplate/main.py
Contents:
import streamlit as st
from config import APP_CONFIG
from components.authentication import is_authenticated, login_user, logout_user
from components.navigation import render_navigation
from utils.helpers import load_css, load_js

def main():
    st.set_page_config(
        page_title=APP_CONFIG.APP_NAME,
        page_icon=APP_CONFIG.PAGE_ICON,
        layout=APP_CONFIG.LAYOUT
    )

    load_css()
    load_js()

    if 'authenticated' not in st.session_state:
        if APP_CONFIG.USE_AUTHENTICATION:
            st.session_state.authenticated = False
        else:
            st.session_state.authenticated = True

    if not is_authenticated():
        login_user()
    else:
        render_navigation()
        
        st.title(f"Welcome to {APP_CONFIG.APP_NAME}")
        if APP_CONFIG.USE_AUTHENTICATION:
            st.write(f"Hello, {st.session_state.username}!")
        else: 
            st.write("Hello!")
        st.write("This is the main page of your application.")
        st.write("Use the navigation to explore other pages.")
        if APP_CONFIG.USE_AUTHENTICATION and APP_CONFIG.SHOW_NAVBAR:
            if st.button("Logout", key="navbar_logout", use_container_width=True):
                logout_user()
                
if __name__ == "__main__":
    main()

File: /home/machris/projects/github/streamlit-boilerplate/pages/1_dashboard.py
Contents:
import streamlit as st
from components.authentication import is_authenticated
from components.navigation import render_navigation

if not is_authenticated():
    st.warning("Please log in to access this page.")
    st.stop()

render_navigation()

st.title("Dashboard")
st.write("This is the dashboard page. Add your dashboard content here.")

File: /home/machris/projects/github/streamlit-boilerplate/pages/2_settings.py
Contents:
import streamlit as st
from components.authentication import is_authenticated, change_password, change_username
from components.navigation import render_navigation
from config import APP_CONFIG

if not is_authenticated():
    st.warning("Please log in to access this page.")
    st.stop()

render_navigation()

st.title("Settings")
st.write("This is the settings page. Add your settings content here.")


if APP_CONFIG.USE_AUTHENTICATION:
    st.title("User Profile")
    st.write(f"Current username: {st.session_state.username}")
    
    st.subheader("Change Password")
    current_password = st.text_input("Current Password", type="password")
    new_password = st.text_input("New Password", type="password")
    if st.button("Change Password"):
        if change_password(current_password, new_password):
            st.success("Password changed successfully!")
        else:
            st.error("Failed to change password. Please check your current password.")

    st.subheader("Change Username")
    new_username = st.text_input("New Username")
    if st.button("Change Username"):
        if change_username(new_username):
            st.success("Username changed successfully!")
            st.experimental_rerun()
        else:
            st.error("Failed to change username. This username might already be taken.")

File: /home/machris/projects/github/streamlit-boilerplate/components/navigation.py
Contents:
import streamlit as st
from config import APP_CONFIG
from components.authentication import logout_user
from streamlit.runtime.scriptrunner import RerunData, RerunException
from streamlit.source_util import get_pages

def render_navigation():
    if APP_CONFIG.SHOW_NAVBAR:
        render_nav_items(is_sidebar=False)
    if APP_CONFIG.SHOW_SIDEBAR:
        with st.sidebar:
            st.title("Navigation")
            render_nav_items(is_sidebar=True)

def render_nav_items(is_sidebar=False):
    cols = st.columns(len(APP_CONFIG.PAGES) + 1) if not is_sidebar else [st.sidebar]
    
    for idx, (page_name, settings) in enumerate(APP_CONFIG.PAGES.items()):
        icon = settings.get("icon")
        page_number = settings.get("page_number")
        page_path = f"pages/{page_number}_{page_name.lower()}" if page_name.lower() != "home" else "main"

        if is_sidebar:
            st.page_link(f"{page_path}.py", label=f":{icon}: {page_name}", use_container_width=True)
        else:
            with cols[idx]:
                st.page_link(f"{page_path}.py", label=f":{icon}: {page_name}", use_container_width=True)
    
    # Logout button for sidebar
    if is_sidebar and APP_CONFIG.USE_AUTHENTICATION:
        if st.button("Logout", key="sidebar_logout", use_container_width=True):
            logout_user()



File: /home/machris/projects/github/streamlit-boilerplate/components/authentication.py
Contents:
import streamlit as st
from config import APP_CONFIG

# User database
# For in-memory authentication, add or modify users here
USERS = {
    "admin": {"password": "admin123", "username": "admin"},
    "user": {"password": "user123", "username": "user"}
}

def is_authenticated():
    return st.session_state.get('authenticated', False)

def login_user():
    st.title("Login")
    username = st.text_input("Username")
    password = st.text_input("Password", type="password")
    if st.button("Login"):
        if authenticate_user(username, password):
            st.session_state.authenticated = True
            st.session_state.username = username
            st.success("Logged in successfully!")
            st.rerun()
        else:
            st.error("Invalid username or password")

def logout_user():
    st.session_state.authenticated = False
    st.session_state.username = None
    st.rerun()

def authenticate_user(username, password):
    if APP_CONFIG.AUTH_METHOD == "in_memory":
        return username in USERS and USERS[username]["password"] == password
    elif APP_CONFIG.AUTH_METHOD == "database":
        # Implement database authentication logic
        # Example: query a database to check username and password
        pass
    elif APP_CONFIG.AUTH_METHOD == "api":
        # Implement API authentication logic
        # Example: make an API call to verify username and password
        pass
    return False

def change_password(current_password, new_password):
    username = st.session_state.username
    if authenticate_user(username, current_password):
        USERS[username]["password"] = new_password
        return True
    return False

def change_username(new_username):
    old_username = st.session_state.username
    if new_username not in USERS:
        USERS[new_username] = USERS.pop(old_username)
        USERS[new_username]["username"] = new_username
        st.session_state.username = new_username
        return True
    return False

# Function to add a new user (for admin use)
def add_user(username, password):
    if username not in USERS:
        USERS[username] = {"password": password, "username": username}
        return True
    return False

# Function to remove a user (for admin use)
def remove_user(username):
    if username in USERS:
        del USERS[username]
        return True
    return False

File: /home/machris/projects/github/streamlit-boilerplate/components/footer.py
Contents:
import streamlit as st
from config import APP_CONFIG

def footer():
    if APP_CONFIG.SHOW_FOOTER:
        st.markdown(
            f"""
            <div class="footer">
                <p>{APP_CONFIG.FOOTER_TEXT}</p>
            </div>
            """,
            unsafe_allow_html=True
        )


File: /home/machris/projects/github/streamlit-boilerplate/static/js/analytics.js
Contents:


File: /home/machris/projects/github/streamlit-boilerplate/static/js/main.js
Contents:
console.log("Streamlit Starter Template loaded");


File: /home/machris/projects/github/streamlit-boilerplate/static/css/theme.css
Contents:


File: /home/machris/projects/github/streamlit-boilerplate/static/css/main.css
Contents:


File: /home/machris/projects/github/streamlit-boilerplate/static/images/background.jpg
Contents:


File: /home/machris/projects/github/streamlit-boilerplate/static/images/logo.png
Contents:


File: /home/machris/projects/github/streamlit-boilerplate/.streamlit/secrets.toml
Contents:


File: /home/machris/projects/github/streamlit-boilerplate/.streamlit/config.toml
Contents:
[theme]
primaryColor = "#3366cc"
backgroundColor = "#ffffff"
secondaryBackgroundColor = "#f0f0f0"
textColor = "#31333F"
font = "sans serif"

[client]
showSidebarNavigation = false

File: /home/machris/projects/github/streamlit-boilerplate/utils/helpers.py
Contents:
import streamlit as st

def load_css():
    st.markdown("""
        <style>
        #MainMenu {visibility: hidden;}
        footer {visibility: hidden;}
        .stApp {
            background-color: #f0f2f6;
        }
        .stButton>button {
            background-color: #4CAF50;
            color: white;
        }
        </style>
    """, unsafe_allow_html=True)

def load_js():
    # Add any JavaScript you want to load here
    pass

